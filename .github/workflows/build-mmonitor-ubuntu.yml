name: MMonitor pipeline complete build ubuntu

on:
  push:
    branches:
      - workflows
  pull_request:
    branches:
      - workflows
  workflow_dispatch:

jobs:
  build-flye:
    name: Build Flye from Source
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Flye build
        id: cache-flye
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/flye
          key: ${{ runner.os }}-flye-${{ hashFiles('desktop/lib/Flye/**') }}

      - name: Build Flye
        if: steps.cache-flye.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/fenderglass/Flye.git desktop/lib/Flye
          cd desktop/lib/Flye
          python3 setup.py build
          python3 setup.py install --user

      - name: Upload Flye binaries
        uses: actions/upload-artifact@v4
        with:
          name: flye-binaries
          path: ~/.local/bin/flye

  build-samtools:
    name: Build Samtools from Source
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Samtools build
        id: cache-samtools
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/samtools
          key: ${{ runner.os }}-samtools-${{ hashFiles('**/samtools/**') }}

      - name: Build HTSlib
        if: steps.cache-samtools.outputs.cache-hit != 'true'
        run: |
          git clone --recursive https://github.com/samtools/htslib.git
          cd htslib
          git submodule update --init --recursive
          autoheader
          autoconf
          autoreconf -i
          ./configure
          make
          sudo make install

      - name: Build Samtools
        if: steps.cache-samtools.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/samtools/samtools.git
          cd samtools
          autoreconf -i
          ./configure
          make
          sudo make install

      - name: Upload Samtools binaries
        uses: actions/upload-artifact@v4
        with:
          name: samtools-binaries
          path: /usr/local/bin/samtools

  build-centrifuger:
    name: Build Centrifuger from Source on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Cache Centrifuger build
        id: cache-centrifuger
        uses: actions/cache@v4
        with:
          path: centrifuger/centrifuger
          key: ${{ runner.os }}-centrifuger-${{ hashFiles('**/centrifuger/**') }}
  
      - name: Install dependencies
        if: steps.cache-centrifuger.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y build-essential
  
      - name: Clone Centrifuger
        if: steps.cache-centrifuger.outputs.cache-hit != 'true'
        run: git clone https://github.com/mourisl/centrifuger.git
  
      - name: Build Centrifuger
        if: steps.cache-centrifuger.outputs.cache-hit != 'true'
        run: |
          cd centrifuger
          make
  
      - name: Upload Centrifuger binaries
        uses: actions/upload-artifact@v4
        with:
          name: centrifuger-binaries
          path: centrifuger/centrifuger

  build-keggcharter:
    name: Prepare KEGGCharter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache KEGGCharter build
        id: cache-keggcharter
        uses: actions/cache@v4
        with:
          path: KEGGCharter
          key: ${{ runner.os }}-keggcharter-${{ hashFiles('**/KEGGCharter/**') }}
      
      - name: Clone KEGGCharter
        if: steps.cache-keggcharter.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/iquasere/KEGGCharter.git
      
      - name: Upload KEGGCharter files
        uses: actions/upload-artifact@v4
        with:
          name: keggcharter-files
          path: KEGGCharter

  build-bakta:
    name: Build Bakta from Source
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Cache Bakta build
        id: cache-bakta
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/Python/3.10.15/x64/bin/bakta*
          key: ${{ runner.os }}-bakta-${{ hashFiles('**/bakta/**') }}
      
      - name: Build Bakta
        if: steps.cache-bakta.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/oschwengers/bakta.git
          cd bakta
          pip install .
      
      - name: Find Bakta files
        run: |
          which bakta
          ls -l $(which bakta)
          find /opt/hostedtoolcache/Python -name "bakta*"
      
      - name: Upload Bakta files
        uses: actions/upload-artifact@v4
        with:
          name: bakta-files
          path: |
            /opt/hostedtoolcache/Python/3.10.15/x64/bin/bakta
            /opt/hostedtoolcache/Python/3.10.15/x64/bin/bakta-*

  build-emu:
    name: Clone EMU 16S Profiler (excluding large files)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache EMU build
        id: cache-emu
        uses: actions/cache@v4
        with:
          path: emu
          key: ${{ runner.os }}-emu-${{ hashFiles('**/emu/**') }}
      
      - name: Clone EMU (sparse checkout)
        if: steps.cache-emu.outputs.cache-hit != 'true'
        run: |
          mkdir emu
          cd emu
          git init
          git remote add origin https://github.com/treangenlab/emu.git
          git config core.sparseCheckout true
          echo '/*' > .git/info/sparse-checkout
          echo '!emu_database' >> .git/info/sparse-checkout
          echo '!example' >> .git/info/sparse-checkout
          echo '!example_customdb' >> .git/info/sparse-checkout
          git fetch --depth 1 origin --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $latest_tag
      
      - name: Upload EMU files
        uses: actions/upload-artifact@v4
        with:
          name: emu-files
          path: |
            emu
            !emu/emu_database
            !emu/example
            !emu/example_customdb

  build-medaka:
    name: Build Medaka from Source
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # Use Python 3.10 for compatibility
      
      - name: Cache Medaka build
        id: cache-medaka
        uses: actions/cache@v4
        with:
          path: medaka_files
          key: ${{ runner.os }}-medaka-${{ hashFiles('**/medaka/**') }}
      
      - name: Install system dependencies
        if: steps.cache-medaka.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev zlib1g-dev
      
      - name: Build Medaka
        if: steps.cache-medaka.outputs.cache-hit != 'true'
        run: |
          python3 -m venv medaka-env
          source medaka-env/bin/activate
          pip install medaka
      
      - name: Find and prepare Medaka files
        if: steps.cache-medaka.outputs.cache-hit != 'true'
        run: |
          source medaka-env/bin/activate
          mkdir -p medaka_files
          cp $(which medaka) medaka_files/
          cp $(dirname $(which medaka))/medaka_* medaka_files/
      
      - name: Upload Medaka files
        uses: actions/upload-artifact@v4
        with:
          name: medaka-files
          path: medaka_files

  build-semibin2:
    name: Build SemiBin2 on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
      
      - name: Cache SemiBin2 build
        id: cache-semibin2
        uses: actions/cache@v4
        with:
          path: semibin2_files
          key: ${{ runner.os }}-semibin2-${{ hashFiles('**/semibin2/**') }}
      
      - name: Install SemiBin2 and dependencies
        shell: bash -l {0}
        if: steps.cache-semibin2.outputs.cache-hit != 'true'
        run: |
          conda create -n SemiBin python=3.10 -y
          conda activate SemiBin
          conda install -c bioconda bedtools hmmer samtools -y
          conda install -c conda-forge -c bioconda semibin -y
          conda install -c pytorch -c nvidia pytorch pytorch-cuda=11.8 -y
          SemiBin2 --version
      
      
      - name: Prepare SemiBin2 files for upload
        shell: bash -l {0}
        if: steps.cache-semibin2.outputs.cache-hit != 'true'
        run: |
          conda activate SemiBin
          mkdir -p semibin2_files/bin
          cp $(which SemiBin2) semibin2_files/bin/
          cp $(which bedtools) semibin2_files/bin/
          cp $(which hmmsearch) semibin2_files/bin/
          cp $(which samtools) semibin2_files/bin/
          
          # Copy only essential Python packages
          mkdir -p semibin2_files/lib/python3.10/site-packages
          cp -r $CONDA_PREFIX/lib/python3.10/site-packages/SemiBin semibin2_files/lib/python3.10/site-packages/
          cp -r $CONDA_PREFIX/lib/python3.10/site-packages/torch semibin2_files/lib/python3.10/site-packages/
      
      - name: Upload SemiBin2 files
        uses: actions/upload-artifact@v4
        with:
          name: semibin2-files
          path: semibin2_files

  build-mmonitor-pyinstaller:
    name: Build MMonitor with PyInstaller
    runs-on: ubuntu-latest
    needs: [build-flye, build-samtools, build-centrifuger, build-keggcharter, build-bakta, build-emu, build-medaka, build-semibin2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Python dependencies
        run: |
          python3 -m venv pyinstaller-env
          source pyinstaller-env/bin/activate
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PyInstaller
        run: |
          pip install pyinstaller

      - name: Prepare binaries and scripts
        run: |
          mkdir -p $GITHUB_WORKSPACE/desktop/src/mmonitor/bin
          mkdir -p $GITHUB_WORKSPACE/desktop/src/mmonitor/emu
          mkdir -p $GITHUB_WORKSPACE/desktop/src/mmonitor/KEGGCharter
          mkdir -p $GITHUB_WORKSPACE/desktop/src/mmonitor/lib/python3.10/site-packages
          cp artifacts/flye-binaries/flye $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/ || true
          cp artifacts/samtools-binaries/samtools $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/ || true
          cp artifacts/centrifuger-binaries/centrifuger $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/ || true
          cp -r artifacts/keggcharter-files/* $GITHUB_WORKSPACE/desktop/src/mmonitor/KEGGCharter/ || true
          cp -r artifacts/bakta-files/* $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/ || true
          cp -r artifacts/emu-files/* $GITHUB_WORKSPACE/desktop/src/mmonitor/emu/ || true
          cp -r artifacts/medaka-files/* $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/ || true
          cp -r artifacts/semibin2-files/* $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/ || true
          chmod +x $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/* || true
          chmod +x $GITHUB_WORKSPACE/desktop/src/mmonitor/emu/emu || true
      
      - name: List artifacts and copied files
        run: |
          echo "Artifacts:"
          ls -R artifacts
          echo "Copied files:"
          ls -R $GITHUB_WORKSPACE/desktop/src/mmonitor

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE/desktop:$GITHUB_WORKSPACE/desktop/src:$GITHUB_WORKSPACE/desktop/src/mmonitor" >> $GITHUB_ENV

      - name: Cache PyInstaller build
        id: cache-pyinstaller
        uses: actions/cache@v4
        with:
          path: desktop/output
          key: ${{ runner.os }}-mmonitor-${{ hashFiles('desktop/src/mmonitor/**', 'requirements.txt') }}

      - name: Build MMonitor
        if: steps.cache-pyinstaller.outputs.cache-hit != 'true'
        run: |
          cd desktop/src/mmonitor
          pyinstaller --onefile --add-data "bin:bin" --add-data "KEGGCharter:KEGGCharter" --add-data "emu:emu" __main__.py --distpath ../../output
          ls -lah ../../output

      - name: Test individual binaries
        run: |
          echo "Testing Flye:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/flye --version || true
          echo "Testing Samtools:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/samtools --version || true
          echo "Testing Centrifuger:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/centrifuger --version || true
          echo "Testing KEGGCharter:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/KEGGCharter/KEGGCharter --help || true
          echo "Testing Bakta:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/bakta --version || true
          echo "Testing EMU:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/emu/emu --version || true
          echo "Testing Medaka:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/medaka --version || true
          echo "Testing SemiBin2:"
          $GITHUB_WORKSPACE/desktop/src/mmonitor/bin/SemiBin2 --version || true

      - name: Test MMonitor binary
        run: |
          cd desktop/output
          chmod +x __main__
          echo "Testing MMonitor version:"
          ./__main__ --version || true
          echo "Testing MMonitor help:"
          ./__main__ --help || true
          # Add more specific MMonitor test commands here if needed

      - name: Upload MMonitor binary
        uses: actions/upload-artifact@v4
        with:
          name: mmonitor-binary-ubuntu
          path: desktop/output/